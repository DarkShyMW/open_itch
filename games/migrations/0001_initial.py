# Generated by Django 4.2.7 on 2025-09-20 01:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Слаг')),
                ('description', models.TextField(verbose_name='Описание')),
                ('short_description', models.CharField(max_length=300, verbose_name='Краткое описание')),
                ('cover_image', models.ImageField(upload_to='games/covers/', verbose_name='Обложка')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='games/banners/', verbose_name='Баннер')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('featured', models.BooleanField(default=False, verbose_name='Рекомендуемое')),
                ('windows_support', models.BooleanField(default=True, verbose_name='Windows')),
                ('mac_support', models.BooleanField(default=False, verbose_name='macOS')),
                ('linux_support', models.BooleanField(default=False, verbose_name='Linux')),
                ('android_support', models.BooleanField(default=False, verbose_name='Android')),
                ('ios_support', models.BooleanField(default=False, verbose_name='iOS')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Количество скачиваний')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='developed_games', to=settings.AUTH_USER_MODEL, verbose_name='Разработчик')),
            ],
            options={
                'verbose_name': 'Игра',
                'verbose_name_plural': 'Игры',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('color', models.CharField(default='#007bff', help_text='HEX цвет', max_length=7, verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GameImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='games/screenshots/', verbose_name='Изображение')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Подпись')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='games.game')),
            ],
            options={
                'verbose_name': 'Изображение игры',
                'verbose_name_plural': 'Изображения игр',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('file', models.FileField(upload_to='games/files/', verbose_name='Файл')),
                ('platform', models.CharField(choices=[('windows', 'Windows'), ('mac', 'macOS'), ('linux', 'Linux'), ('android', 'Android'), ('ios', 'iOS'), ('web', 'Web')], max_length=20, verbose_name='Платформа')),
                ('version', models.CharField(default='1.0', max_length=50, verbose_name='Версия')),
                ('file_size', models.PositiveIntegerField(default=0, verbose_name='Размер файла (байты)')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Количество скачиваний')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='games.game')),
            ],
            options={
                'verbose_name': 'Файл игры',
                'verbose_name_plural': 'Файлы игр',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='genres',
            field=models.ManyToManyField(blank=True, to='games.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='game',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Теги'),
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP адрес')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата скачивания')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='games.game')),
                ('game_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='games.gamefile')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Скачивание',
                'verbose_name_plural': 'Скачивания',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлено в список')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_entries', to='games.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Позиция списка желаний',
                'verbose_name_plural': 'Список желаний',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'game')},
            },
        ),
    ]
